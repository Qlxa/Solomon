import os
import random
import psycopg2
from psycopg2.extras import RealDictCursor
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, PreCheckoutQueryHandler
from telegram.error import Forbidden, BadRequest
from cards import cards  # —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç

# ------------------- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø -------------------
trial_period_days = 3   # –ø—Ä–æ–±–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ —É –¥–Ω—è—Ö
subscription_cost = 100 # –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–∫–∏ —É ‚≠êÔ∏è
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN")  # —Ç–æ–∫–µ–Ω –¥–ª—è –ø–ª–∞—Ç–µ–∂—ñ–≤ Telegram

# ------------------- –ë–ê–ó–ê –î–ê–ù–ò–• -------------------
def get_db_connection():
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        raise ValueError("DATABASE_URL environment variable is missing")
    return psycopg2.connect(database_url)

def mark_user_as_blocked(user_id):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("UPDATE subscriptions SET blocked = TRUE WHERE user_id = %s", (user_id,))
    conn.commit()
    cur.close()
    conn.close()

def is_user_blocked(user_id):
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("SELECT blocked FROM subscriptions WHERE user_id = %s", (user_id,))
    result = cur.fetchone()
    cur.close()
    conn.close()
    return result and result['blocked']

def is_subscription_active(user_id):
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("SELECT end_date, blocked FROM subscriptions WHERE user_id = %s", (user_id,))
    row = cur.fetchone()
    cur.close()
    conn.close()
    if row:
        if row['blocked']:
            return False
        return datetime.now().date() < row['end_date']
    return False

def give_trial(user_id):
    conn = get_db_connection()
    cur = conn.cursor()
    start_date = datetime.now()
    end_date = start_date + timedelta(days=trial_period_days)
    cur.execute("""
        INSERT INTO subscriptions (user_id, start_date, end_date, blocked)
        VALUES (%s, %s, %s, FALSE)
        ON CONFLICT (user_id) DO UPDATE 
        SET start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date, blocked = FALSE
    """, (user_id, start_date.date(), end_date.date()))
    conn.commit()
    cur.close()
    conn.close()

# ------------------- –§–£–ù–ö–¶–Ü–á -------------------
def format_card_message(card):
    return (
        f"üÉè**{card['name']}**\n\n"
        f"‚ú®**–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞:** {card['keywords']}\n\n"
        f"üìú**–ó–Ω–∞—á–µ–Ω–Ω—è:** {card['meaning']}\n\n"
        f"üí° **–ü–æ—Ä–∞–¥–∞ –¥–Ω—è:** {card['advice']}"
    )

def payment_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç–∏ 100 ‚≠êÔ∏è / 30 –¥–Ω—ñ–≤", pay=True)]])

async def send_invoice_handler(context, chat_id):
    prices = [LabeledPrice(label="–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω—ñ–≤", amount=subscription_cost)]
    await context.bot.send_invoice(
        chat_id=chat_id,
        title="–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¢–∞—Ä–æ-–±–æ—Ç–∞",
        description="–î–æ—Å—Ç—É–ø –¥–æ –∫–∞—Ä—Ç –¢–∞—Ä–æ –ø—Ä–æ—Ç—è–≥–æ–º 30 –¥–Ω—ñ–≤",
        payload="subscription_payment",
        provider_token=PROVIDER_TOKEN,
        currency="XTR",
        prices=prices,
        start_parameter="subscription-payment",
        reply_markup=payment_keyboard()
    )

# ------------------- –û–ë–†–û–ë–ù–ò–ö–ò -------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if not is_subscription_active(user_id):
        give_trial(user_id)
        await update.message.reply_text("–í–∞–º –Ω–∞–¥–∞–Ω–æ 3 –¥–Ω—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è üåü")
    else:
        await update.message.reply_text("–í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ")

    keyboard = ReplyKeyboardMarkup([[KeyboardButton("–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ä—Ç—É –¥–Ω—è")]], resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ä—Ç—É –¥–Ω—è.", reply_markup=keyboard)

async def send_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    if not is_subscription_active(user_id):
        await update.message.reply_text("‚õî –í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –ü–æ—Ç—Ä—ñ–±–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –¥–æ–Ω–∞—Ç.")
        await send_invoice_handler(context, update.message.chat_id)
        return

    card = random.choice(cards)
    try:
        await update.message.reply_photo(
            photo=card['image'],
            caption=format_card_message(card),
            parse_mode="Markdown"
        )
    except Forbidden:
        mark_user_as_blocked(user_id)

async def pre_checkout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    start_date = datetime.now()
    end_date = start_date + timedelta(days=30)
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO subscriptions (user_id, start_date, end_date, blocked)
        VALUES (%s, %s, %s, FALSE)
        ON CONFLICT (user_id) DO UPDATE 
        SET start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date, blocked = FALSE
    """, (user_id, start_date, end_date))
    conn.commit()
    cur.close()
    conn.close()
    await update.message.reply_text("‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω—ñ–≤.")

# ------------------- –ì–û–õ–û–í–ù–ê -------------------
def main():
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ BOT_TOKEN")

    app = Application.builder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("card", send_card))
    app.add_handler(MessageHandler(filters.Regex("^–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ä—Ç—É –¥–Ω—è$"), send_card))
    app.add_handler(PreCheckoutQueryHandler(pre_checkout_handler))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    app.run_polling()

if __name__ == "__main__":
    main()
