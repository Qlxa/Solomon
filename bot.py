import os
import random
import logging
import psycopg2
from psycopg2.extras import RealDictCursor
from datetime import datetime, timedelta
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, filters, PreCheckoutQueryHandler, CallbackQueryHandler
)
from telegram.error import Forbidden, BadRequest
from cards import cards  # —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç

# ------------------- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø -------------------
trial_period_days = 3         # –ø—Ä–æ–±–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ —É –¥–Ω—è—Ö
subscription_cost_stars = 100  # –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–∫–∏ —É ‚≠êÔ∏è
subscription_days = 30         # —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–∫–∏ —É –¥–Ω—è—Ö
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN")  # —Ç–æ–∫–µ–Ω –¥–ª—è –ø–ª–∞—Ç–µ–∂—ñ–≤ Telegram

# Telegram Stars —Ä–∞—Ö—É—é—Ç—å—Å—è —É –º—ñ–∫—Ä–æ–æ–¥–∏–Ω–∏—Ü—è—Ö (1‚≠êÔ∏è = 100_000)
subscription_cost_amount = subscription_cost_stars * 100_000

# ------------------- –õ–û–ì–Ü–ù–ì -------------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ------------------- –ë–ê–ó–ê –î–ê–ù–ò–• -------------------
def get_db_connection():
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        raise ValueError("DATABASE_URL environment variable is missing")
    return psycopg2.connect(database_url)

def mark_user_as_blocked(user_id):
    conn = get_db_connection()
    cur = conn.cursor()
    cur.execute("UPDATE subscriptions SET blocked = TRUE WHERE user_id = %s", (user_id,))
    conn.commit()
    cur.close()
    conn.close()

def is_user_blocked(user_id):
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("SELECT blocked FROM subscriptions WHERE user_id = %s", (user_id,))
    result = cur.fetchone()
    cur.close()
    conn.close()
    return result and result['blocked']

def is_subscription_active(user_id):
    conn = get_db_connection()
    cur = conn.cursor(cursor_factory=RealDictCursor)
    cur.execute("SELECT end_date, blocked FROM subscriptions WHERE user_id = %s", (user_id,))
    row = cur.fetchone()
    cur.close()
    conn.close()
    if row:
        if row['blocked']:
            return False
        return datetime.now().date() < row['end_date']
    return False

def give_trial(user_id):
    conn = get_db_connection()
    cur = conn.cursor()
    start_date = datetime.now().date()
    end_date = start_date + timedelta(days=trial_period_days)
    cur.execute("""
        INSERT INTO subscriptions (user_id, start_date, end_date, blocked)
        VALUES (%s, %s, %s, FALSE)
        ON CONFLICT (user_id) DO UPDATE 
        SET start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date, blocked = FALSE
    """, (user_id, start_date, end_date))
    conn.commit()
    cur.close()
    conn.close()

def activate_subscription(user_id):
    conn = get_db_connection()
    cur = conn.cursor()
    start_date = datetime.now().date()
    end_date = start_date + timedelta(days=subscription_days)
    cur.execute("""
        INSERT INTO subscriptions (user_id, start_date, end_date, blocked)
        VALUES (%s, %s, %s, FALSE)
        ON CONFLICT (user_id) DO UPDATE 
        SET start_date = EXCLUDED.start_date, end_date = EXCLUDED.end_date, blocked = FALSE
    """, (user_id, start_date, end_date))
    conn.commit()
    cur.close()
    conn.close()

# ------------------- –§–£–ù–ö–¶–Ü–á –ö–õ–ê–í–Ü–ê–¢–£–†–ò -------------------
def format_card_message(card):
    return (
        f"üÉè**{card['name']}**\n\n"
        f"‚ú®**–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞:** {card['keywords']}\n\n"
        f"üìú**–ó–Ω–∞—á–µ–Ω–Ω—è:** {card['meaning']}\n\n"
        f"üí° **–ü–æ—Ä–∞–¥–∞ –¥–Ω—è:** {card['advice']}"
    )

def main_keyboard():
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ä—Ç—É –¥–Ω—è", callback_data="get_card")
    ]])

def payment_keyboard():
    return InlineKeyboardMarkup([[
        InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç–∏ {subscription_cost_stars} ‚≠êÔ∏è / {subscription_days} –¥–Ω—ñ–≤", pay=True)
    ]])

async def send_invoice_handler(context, chat_id):
    prices = [LabeledPrice(label=f"–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ {subscription_days} –¥–Ω—ñ–≤", amount=subscription_cost_amount)]
    await context.bot.send_invoice(
        chat_id=chat_id,
        title="–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¢–∞—Ä–æ-–±–æ—Ç–∞",
        description=f"–î–æ—Å—Ç—É–ø –¥–æ –∫–∞—Ä—Ç –¢–∞—Ä–æ –ø—Ä–æ—Ç—è–≥–æ–º {subscription_days} –¥–Ω—ñ–≤",
        payload="subscription_payment",
        provider_token=PROVIDER_TOKEN,
        currency="XTR",
        prices=prices,
        start_parameter="subscription-payment",
        reply_markup=payment_keyboard()
    )

# ------------------- –û–ë–†–û–ë–ù–ò–ö–ò -------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    if not is_subscription_active(user_id):
        give_trial(user_id)
        await update.message.reply_text(f"–í–∞–º –Ω–∞–¥–∞–Ω–æ {trial_period_days} –¥–Ω—ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è üåü")
    else:
        await update.message.reply_text("–í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚úÖ")

    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞—Ä—Ç—É –¥–Ω—è.", reply_markup=main_keyboard())

async def send_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if not is_subscription_active(user_id):
        await update.effective_message.reply_text(
            "‚õî –í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó:",
            reply_markup=payment_keyboard()
        )
        return

    card = random.choice(cards)
    try:
        await update.effective_message.reply_photo(
            photo=card['image'],
            caption=format_card_message(card),
            parse_mode="Markdown"
        )
    except (Forbidden, BadRequest):
        mark_user_as_blocked(user_id)
        logger.warning(f"Failed to send photo to user {user_id}. Marking as blocked.")
        await update.effective_message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ. –ú–æ–∂–ª–∏–≤–æ, –±–æ—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –≤–∞–º–∏.")


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "get_card":
        await send_card(update, context)

async def pre_checkout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    activate_subscription(user_id)
    await update.message.reply_text(f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞ –Ω–∞ {subscription_days} –¥–Ω—ñ–≤.")

# ------------------- –ì–û–õ–û–í–ù–ê -------------------
def main():
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ BOT_TOKEN")

    app = Application.builder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("card", send_card)) # –ó–∞–ª–∏—à–∏–≤ —Ü—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(PreCheckoutQueryHandler(pre_checkout_handler))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    app.run_polling()

if __name__ == "__main__":
    main()
